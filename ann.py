# generated by datamodel-codegen:
#   filename:  annonars_seqvar_info_success.json
#   timestamp: 2024-06-11T09:42:25+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Query(BaseModel):
    genome_release: str
    chromosome: str
    pos: int
    reference: str
    alternative: str


class Cadd(BaseModel):
    Chrom: str
    Pos: int
    Ref: str
    Alt: str
    Type: str
    Length: int
    AnnoType: str
    Consequence: str
    ConsScore: int
    ConsDetail: str
    GC: float
    CpG: float
    motifECount: None
    motifEName: None
    motifEHIPos: None
    motifEScoreChng: None
    oAA: None
    nAA: None
    GeneID: str
    FeatureID: str
    GeneName: str
    CCDS: None
    Intron: None
    Exon: None
    cDNApos: None
    relcDNApos: None
    CDSpos: None
    relCDSpos: None
    protPos: None
    relProtPos: None
    Domain: None
    Dst2Splice: None
    Dst2SplType: None
    minDistTSS: int
    minDistTSE: int
    SIFTcat: None
    SIFTval: None
    PolyPhenCat: None
    PolyPhenVal: None
    priPhCons: float
    mamPhCons: float
    verPhCons: int
    priPhyloP: float
    mamPhyloP: float
    verPhyloP: float
    bStatistic: int
    targetScan: None
    mirSVR_Score: None = Field(..., alias='mirSVR-Score')
    mirSVR_E: None = Field(..., alias='mirSVR-E')
    mirSVR_Aln: None = Field(..., alias='mirSVR-Aln')
    cHmmTssA: float
    cHmmTssAFlnk: int
    cHmmTxFlnk: float
    cHmmTx: float
    cHmmTxWk: float
    cHmmEnhG: float
    cHmmEnh: int
    cHmmZnfRpts: int
    cHmmHet: int
    cHmmTssBiv: int
    cHmmBivFlnk: int
    cHmmEnhBiv: int
    cHmmReprPC: int
    cHmmReprPCWk: int
    cHmmQuies: int
    GerpRS: float
    GerpRSpval: float
    GerpN: float
    GerpS: float
    TFBS: int
    TFBSPeaks: int
    TFBSPeaksMax: float
    tOverlapMotifs: None
    motifDist: None
    Segway: str
    EncH3K27Ac: float
    EncH3K4Me1: int
    EncH3K4Me3: float
    EncExp: float
    EncNucleo: float
    EncOCC: None
    EncOCCombPVal: None
    EncOCDNasePVal: None
    EncOCFairePVal: None
    EncOCpolIIPVal: None
    EncOCctcfPVal: None
    EncOCmycPVal: None
    EncOCDNaseSig: None
    EncOCFaireSig: None
    EncOCpolIISig: None
    EncOCctcfSig: None
    EncOCmycSig: None
    Grantham: None
    SpliceAI_acc_gain: None = Field(..., alias='SpliceAI-acc-gain')
    SpliceAI_acc_loss: None = Field(..., alias='SpliceAI-acc-loss')
    SpliceAI_don_gain: None = Field(..., alias='SpliceAI-don-gain')
    SpliceAI_don_loss: None = Field(..., alias='SpliceAI-don-loss')
    MMSp_acceptorIntron: None
    MMSp_acceptor: None
    MMSp_exon: None
    MMSp_donor: None
    MMSp_donorIntron: None
    Dist2Mutation: int
    Freq100bp: int
    Rare100bp: int
    Sngl100bp: int
    Freq1000bp: int
    Rare1000bp: int
    Sngl1000bp: int
    Freq10000bp: int
    Rare10000bp: int
    Sngl10000bp: int
    dbscSNV_ada_score: None = Field(..., alias='dbscSNV-ada_score')
    dbscSNV_rf_score: None = Field(..., alias='dbscSNV-rf_score')
    RawScore: float
    PHRED: float


class Dbsnp(BaseModel):
    chrom: str
    pos: int
    refAllele: str
    altAllele: str
    rsId: int


class Domain(BaseModel):
    id: str
    source: str


class VepItem(BaseModel):
    allele: str
    consequence: str
    impact: str
    symbol: str
    gene: str
    featureType: str
    feature: str
    featureBiotype: str
    exon: Optional[str] = None
    hgvsc: Optional[str] = None
    hgvsp: Optional[str] = None
    cdnaPosition: Optional[str] = None
    cdsPosition: Optional[str] = None
    proteinPosition: Optional[str] = None
    aminoAcids: Optional[str] = None
    codons: Optional[str] = None
    existingVariation: str
    dbsnpId: str
    strand: str
    variantClass: str
    minimised: str
    symbolSource: str
    hgncId: str
    ccds: Optional[str] = None
    ensp: Optional[str] = None
    swissprot: Optional[str] = None
    trembl: Optional[str] = None
    uniparc: Optional[str] = None
    genePheno: Optional[str] = None
    domains: Optional[List[Domain]] = None
    hgvsOffset: Optional[str] = None
    lof: Optional[str] = None
    lofInfo: Optional[str] = None
    distance: Optional[str] = None
    canonical: Optional[bool] = None
    flags: Optional[str] = None
    lofFilter: Optional[str] = None
    intron: Optional[str] = None


class Overall(BaseModel):
    an: int
    ac: Optional[int] = None
    af: Optional[float] = None


class Xx(BaseModel):
    an: int
    ac: Optional[int] = None
    af: Optional[float] = None


class Xy(BaseModel):
    an: int
    ac: Optional[int] = None
    af: Optional[float] = None


class Counts(BaseModel):
    overall: Overall
    xx: Optional[Xx] = None
    xy: Optional[Xy] = None


class ByPopulationItem(BaseModel):
    population: str
    counts: Counts
    faf95: Optional[float] = None
    faf99: Optional[float] = None


class Overall1(BaseModel):
    ac: int
    an: int
    af: float


class Xx1(BaseModel):
    ac: Optional[int] = None
    an: int
    af: Optional[float] = None


class Xy1(BaseModel):
    ac: int
    an: int
    af: float


class BySex(BaseModel):
    overall: Overall1
    xx: Xx1
    xy: Xy1


class Raw(BaseModel):
    ac: int
    an: int
    af: float


class AlleleCount(BaseModel):
    byPopulation: List[ByPopulationItem]
    bySex: BySex
    raw: Raw
    popmax: str
    afPopmax: float
    acPopmax: int
    anPopmax: int
    nhomaltPopmax: int
    cohort: Optional[str] = None


class VariantInfo(BaseModel):
    variantType: str
    alleleType: str
    nAltAlleles: int
    wasMixed: bool


class QualityInfo(BaseModel):
    fs: float
    inbreedingCoeff: float
    mq: float
    mqRankSum: float
    qd: float
    readPosRankSum: float
    baseQRankSum: float
    clippingRankSum: float
    sor: float
    dp: int
    vqslod: float
    vqsrCulprit: str
    pabMax: float


class AgeInfo(BaseModel):
    ageHistHomNSmaller: int
    ageHistHomNLarger: int
    ageHistHetNSmaller: int
    ageHistHetNLarger: int


class GnomadExomes(BaseModel):
    chrom: str
    pos: int
    refAllele: str
    altAllele: str
    vep: List[VepItem]
    alleleCounts: List[AlleleCount]
    variantInfo: VariantInfo
    qualityInfo: QualityInfo
    ageInfo: AgeInfo


class VepItem1(BaseModel):
    allele: str
    consequence: str
    impact: str
    symbol: str
    gene: str
    featureType: str
    feature: str
    featureBiotype: str
    exon: Optional[str] = None
    hgvsc: Optional[str] = None
    hgvsp: Optional[str] = None
    cdnaPosition: Optional[str] = None
    cdsPosition: Optional[str] = None
    proteinPosition: Optional[str] = None
    aminoAcids: Optional[str] = None
    codons: Optional[str] = None
    existingVariation: str
    dbsnpId: str
    strand: str
    variantClass: str
    minimised: str
    symbolSource: str
    hgncId: str
    ccds: Optional[str] = None
    ensp: Optional[str] = None
    swissprot: Optional[str] = None
    trembl: Optional[str] = None
    uniparc: Optional[str] = None
    genePheno: Optional[str] = None
    domains: Optional[List[Domain]] = None
    hgvsOffset: Optional[str] = None
    lof: Optional[str] = None
    lofInfo: Optional[str] = None
    distance: Optional[str] = None
    canonical: Optional[bool] = None
    flags: Optional[str] = None
    lofFilter: Optional[str] = None
    intron: Optional[str] = None


class Overall2(BaseModel):
    an: int
    ac: Optional[int] = None
    af: Optional[float] = None


class Xx2(BaseModel):
    an: int


class Xy2(BaseModel):
    an: int
    ac: Optional[int] = None
    af: Optional[float] = None


class Counts1(BaseModel):
    overall: Optional[Overall2] = None
    xx: Optional[Xx2] = None
    xy: Optional[Xy2] = None


class ByPopulationItem1(BaseModel):
    population: str
    counts: Counts1
    faf95: Optional[int] = None
    faf99: Optional[int] = None


class Overall3(BaseModel):
    ac: int
    an: int
    af: float


class Xy3(BaseModel):
    ac: int
    an: int
    af: float


class BySex1(BaseModel):
    overall: Optional[Overall3] = None
    xx: Optional[Xx2] = None
    xy: Optional[Xy3] = None


class AlleleCount1(BaseModel):
    byPopulation: List[ByPopulationItem1]
    bySex: BySex1
    raw: Optional[Raw] = None
    popmax: Optional[str] = None
    afPopmax: Optional[float] = None
    acPopmax: Optional[int] = None
    anPopmax: Optional[int] = None
    nhomaltPopmax: Optional[int] = None
    cohort: Optional[str] = None


class VariantInfo1(BaseModel):
    variantType: str
    alleleType: str
    nAltAlleles: int


class QualityInfo1(BaseModel):
    fs: float
    inbreedingCoeff: float
    mq: int
    mqRankSum: float
    qd: float
    readPosRankSum: float
    vqsrNegativeTrainSite: bool
    baseQRankSum: float
    clippingRankSum: float
    sor: float
    dp: int
    vqslod: float
    vqsrCulprit: str
    pabMax: float


class GnomadGenomes(BaseModel):
    chrom: str
    pos: int
    refAllele: str
    altAllele: str
    vep: List[VepItem1]
    alleleCounts: List[AlleleCount1]
    variantInfo: VariantInfo1
    qualityInfo: QualityInfo1
    ageInfo: AgeInfo


class Record(BaseModel):
    chrom: str
    start: int
    stop: int
    hgncId: str
    enstId: str
    exonNum: int
    exonCount: int
    alignment: str


class UcscConservationItem(BaseModel):
    records: List[Record]


class Accession(BaseModel):
    accession: str
    version: int


class Description(BaseModel):
    value: str
    dateLastEvaluated: str
    submissionCount: int


class GermlineClassification(BaseModel):
    reviewStatus: str
    description: Description


class Classifications(BaseModel):
    germlineClassification: GermlineClassification


class Rcv(BaseModel):
    accession: Accession
    title: str
    classifications: Classifications


class GermlineClassification1(BaseModel):
    reviewStatus: str
    description: str
    dateLastEvaluated: str
    dateCreated: str
    mostRecentSubmission: str
    numberOfSubmitters: int
    numberOfSubmissions: int


class Classifications1(BaseModel):
    germlineClassification: GermlineClassification1


class SequenceLocation(BaseModel):
    assembly: str
    chr: str
    accession: str
    start: int
    stop: int
    displayStart: int
    displayStop: int
    variantLength: int
    positionVcf: int
    referenceAlleleVcf: str
    alternateAlleleVcf: str


class Record1(BaseModel):
    accession: Accession
    rcvs: List[Rcv]
    name: str
    variationType: str
    classifications: Classifications1
    sequenceLocation: SequenceLocation
    hgncIds: List[str]


class Clinvar(BaseModel):
    records: List[Record1]


class Result(BaseModel):
    cadd: Cadd
    dbsnp: Dbsnp
    dbnsfp: None
    dbscsnv: None
    gnomad_mtdna: None
    gnomad_exomes: GnomadExomes
    gnomad_genomes: GnomadGenomes
    helixmtdb: None
    ucsc_conservation: List[UcscConservationItem]
    clinvar: Clinvar


class Model(BaseModel):
    server_version: str
    query: Query
    result: Result
